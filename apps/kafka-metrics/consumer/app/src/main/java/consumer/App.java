/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package consumer;

import java.util.Properties;
import java.util.Collections;
import java.time.Duration;

import org.apache.kafka.common.serialization.StringDeserializer;
import org.apache.kafka.common.serialization.IntegerDeserializer;
import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.ConsumerRecord;

import io.opentelemetry.api.OpenTelemetry;
import io.opentelemetry.exporter.otlp.logs.OtlpGrpcLogRecordExporter;
import io.opentelemetry.sdk.OpenTelemetrySdk;
import io.opentelemetry.sdk.logs.SdkLoggerProvider;
import io.opentelemetry.sdk.logs.export.BatchLogRecordProcessor;
import io.opentelemetry.sdk.resources.Resource;
import io.opentelemetry.sdk.trace.SdkTracerProvider;
import io.opentelemetry.sdk.trace.samplers.Sampler;

import org.apache.logging.log4j.LogManager;


public class App {
    private static final org.apache.logging.log4j.Logger log4jLogger = LogManager.getLogger("Consumer");

    public static void main(String[] args) {
        OpenTelemetry openTelemetry = initializeOpenTelemetry();
        io.opentelemetry.instrumentation.log4j.appender.v2_17.OpenTelemetryAppender.install(openTelemetry);

        String kafkaAddr = System.getenv("KAFKA_SERVICE_ADDR");
        if (kafkaAddr != null) {
            log4jLogger.info("Using Kafka Broker Address: " + kafkaAddr);
        } else {
            throw new RuntimeException("Environment variable KAFKA_SERVICE_ADDR is not set.");
        }

        Properties props = new Properties();
        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaAddr);
        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());
        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, IntegerDeserializer.class.getName());
        props.put(ConsumerConfig.GROUP_ID_CONFIG, "App");

        KafkaConsumer<String, Integer> consumer = new KafkaConsumer<>(props);
        consumer.subscribe(Collections.singletonList("orders"));

        while (true) {
            ConsumerRecords<String, Integer> records = consumer.poll(Duration.ofMillis(100));
            for (ConsumerRecord<String, Integer> record : records)
            log4jLogger.info("Consumed Message. Received Order # {}", record.value());
           }
        // consumer.close();
    }

    private static OpenTelemetry initializeOpenTelemetry() {
        OpenTelemetrySdk sdk =
            OpenTelemetrySdk.builder()
                .setTracerProvider(SdkTracerProvider.builder().setSampler(Sampler.alwaysOn()).build())
                .setLoggerProvider(
                    SdkLoggerProvider.builder()
                        .setResource(
                            Resource.getDefault().toBuilder()
                                .put("service.name", "log4j-example")
                                .build())
                        .addLogRecordProcessor(
                            BatchLogRecordProcessor.builder(
                                    OtlpGrpcLogRecordExporter.builder()
                                        .setEndpoint("http://otelcol:4317")
                                        .build())
                                .build())
                        .build())
                .build();
    
        // Add hook to close SDK, which flushes logs
        Runtime.getRuntime().addShutdownHook(new Thread(sdk::close));
    
        return sdk;
    }
}
